// Copyright Â© Aptos Foundation
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.23.4
// source: aptos/internal/fullnode/v1/fullnode_data.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FullnodeData_Ping_FullMethodName                    = "/aptos.internal.fullnode.v1.FullnodeData/Ping"
	FullnodeData_GetTransactionsFromNode_FullMethodName = "/aptos.internal.fullnode.v1.FullnodeData/GetTransactionsFromNode"
)

// FullnodeDataClient is the client API for FullnodeData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FullnodeDataClient interface {
	Ping(ctx context.Context, in *PingFullnodeRequest, opts ...grpc.CallOption) (*PingFullnodeResponse, error)
	GetTransactionsFromNode(ctx context.Context, in *GetTransactionsFromNodeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransactionsFromNodeResponse], error)
}

type fullnodeDataClient struct {
	cc grpc.ClientConnInterface
}

func NewFullnodeDataClient(cc grpc.ClientConnInterface) FullnodeDataClient {
	return &fullnodeDataClient{cc}
}

func (c *fullnodeDataClient) Ping(ctx context.Context, in *PingFullnodeRequest, opts ...grpc.CallOption) (*PingFullnodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingFullnodeResponse)
	err := c.cc.Invoke(ctx, FullnodeData_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fullnodeDataClient) GetTransactionsFromNode(ctx context.Context, in *GetTransactionsFromNodeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransactionsFromNodeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FullnodeData_ServiceDesc.Streams[0], FullnodeData_GetTransactionsFromNode_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetTransactionsFromNodeRequest, TransactionsFromNodeResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FullnodeData_GetTransactionsFromNodeClient = grpc.ServerStreamingClient[TransactionsFromNodeResponse]

// FullnodeDataServer is the server API for FullnodeData service.
// All implementations must embed UnimplementedFullnodeDataServer
// for forward compatibility.
type FullnodeDataServer interface {
	Ping(context.Context, *PingFullnodeRequest) (*PingFullnodeResponse, error)
	GetTransactionsFromNode(*GetTransactionsFromNodeRequest, grpc.ServerStreamingServer[TransactionsFromNodeResponse]) error
	mustEmbedUnimplementedFullnodeDataServer()
}

// UnimplementedFullnodeDataServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFullnodeDataServer struct{}

func (UnimplementedFullnodeDataServer) Ping(context.Context, *PingFullnodeRequest) (*PingFullnodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedFullnodeDataServer) GetTransactionsFromNode(*GetTransactionsFromNodeRequest, grpc.ServerStreamingServer[TransactionsFromNodeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetTransactionsFromNode not implemented")
}
func (UnimplementedFullnodeDataServer) mustEmbedUnimplementedFullnodeDataServer() {}
func (UnimplementedFullnodeDataServer) testEmbeddedByValue()                      {}

// UnsafeFullnodeDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FullnodeDataServer will
// result in compilation errors.
type UnsafeFullnodeDataServer interface {
	mustEmbedUnimplementedFullnodeDataServer()
}

func RegisterFullnodeDataServer(s grpc.ServiceRegistrar, srv FullnodeDataServer) {
	// If the following call pancis, it indicates UnimplementedFullnodeDataServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FullnodeData_ServiceDesc, srv)
}

func _FullnodeData_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingFullnodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FullnodeDataServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FullnodeData_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FullnodeDataServer).Ping(ctx, req.(*PingFullnodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FullnodeData_GetTransactionsFromNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTransactionsFromNodeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FullnodeDataServer).GetTransactionsFromNode(m, &grpc.GenericServerStream[GetTransactionsFromNodeRequest, TransactionsFromNodeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FullnodeData_GetTransactionsFromNodeServer = grpc.ServerStreamingServer[TransactionsFromNodeResponse]

// FullnodeData_ServiceDesc is the grpc.ServiceDesc for FullnodeData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FullnodeData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aptos.internal.fullnode.v1.FullnodeData",
	HandlerType: (*FullnodeDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _FullnodeData_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTransactionsFromNode",
			Handler:       _FullnodeData_GetTransactionsFromNode_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "aptos/internal/fullnode/v1/fullnode_data.proto",
}
