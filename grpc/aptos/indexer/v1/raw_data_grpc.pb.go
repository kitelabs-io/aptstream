// Copyright Â© Aptos Foundation
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.23.4
// source: aptos/indexer/v1/raw_data.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RawData_GetTransactions_FullMethodName = "/aptos.indexer.v1.RawData/GetTransactions"
)

// RawDataClient is the client API for RawData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RawDataClient interface {
	// Get transactions batch without any filtering from starting version and end if transaction count is present.
	GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransactionsResponse], error)
}

type rawDataClient struct {
	cc grpc.ClientConnInterface
}

func NewRawDataClient(cc grpc.ClientConnInterface) RawDataClient {
	return &rawDataClient{cc}
}

func (c *rawDataClient) GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransactionsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RawData_ServiceDesc.Streams[0], RawData_GetTransactions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetTransactionsRequest, TransactionsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RawData_GetTransactionsClient = grpc.ServerStreamingClient[TransactionsResponse]

// RawDataServer is the server API for RawData service.
// All implementations must embed UnimplementedRawDataServer
// for forward compatibility.
type RawDataServer interface {
	// Get transactions batch without any filtering from starting version and end if transaction count is present.
	GetTransactions(*GetTransactionsRequest, grpc.ServerStreamingServer[TransactionsResponse]) error
	mustEmbedUnimplementedRawDataServer()
}

// UnimplementedRawDataServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRawDataServer struct{}

func (UnimplementedRawDataServer) GetTransactions(*GetTransactionsRequest, grpc.ServerStreamingServer[TransactionsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (UnimplementedRawDataServer) mustEmbedUnimplementedRawDataServer() {}
func (UnimplementedRawDataServer) testEmbeddedByValue()                 {}

// UnsafeRawDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RawDataServer will
// result in compilation errors.
type UnsafeRawDataServer interface {
	mustEmbedUnimplementedRawDataServer()
}

func RegisterRawDataServer(s grpc.ServiceRegistrar, srv RawDataServer) {
	// If the following call pancis, it indicates UnimplementedRawDataServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RawData_ServiceDesc, srv)
}

func _RawData_GetTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTransactionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RawDataServer).GetTransactions(m, &grpc.GenericServerStream[GetTransactionsRequest, TransactionsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RawData_GetTransactionsServer = grpc.ServerStreamingServer[TransactionsResponse]

// RawData_ServiceDesc is the grpc.ServiceDesc for RawData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RawData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aptos.indexer.v1.RawData",
	HandlerType: (*RawDataServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTransactions",
			Handler:       _RawData_GetTransactions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "aptos/indexer/v1/raw_data.proto",
}
