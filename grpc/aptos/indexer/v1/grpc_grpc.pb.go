// Copyright Â© Aptos Foundation
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.23.4
// source: aptos/indexer/v1/grpc.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GrpcManager_Heartbeat_FullMethodName                = "/aptos.indexer.v1.GrpcManager/Heartbeat"
	GrpcManager_GetTransactions_FullMethodName          = "/aptos.indexer.v1.GrpcManager/GetTransactions"
	GrpcManager_GetDataServiceForRequest_FullMethodName = "/aptos.indexer.v1.GrpcManager/GetDataServiceForRequest"
)

// GrpcManagerClient is the client API for GrpcManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcManagerClient interface {
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*TransactionsResponse, error)
	GetDataServiceForRequest(ctx context.Context, in *GetDataServiceForRequestRequest, opts ...grpc.CallOption) (*GetDataServiceForRequestResponse, error)
}

type grpcManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcManagerClient(cc grpc.ClientConnInterface) GrpcManagerClient {
	return &grpcManagerClient{cc}
}

func (c *grpcManagerClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, GrpcManager_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcManagerClient) GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*TransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionsResponse)
	err := c.cc.Invoke(ctx, GrpcManager_GetTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcManagerClient) GetDataServiceForRequest(ctx context.Context, in *GetDataServiceForRequestRequest, opts ...grpc.CallOption) (*GetDataServiceForRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDataServiceForRequestResponse)
	err := c.cc.Invoke(ctx, GrpcManager_GetDataServiceForRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcManagerServer is the server API for GrpcManager service.
// All implementations must embed UnimplementedGrpcManagerServer
// for forward compatibility.
type GrpcManagerServer interface {
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	GetTransactions(context.Context, *GetTransactionsRequest) (*TransactionsResponse, error)
	GetDataServiceForRequest(context.Context, *GetDataServiceForRequestRequest) (*GetDataServiceForRequestResponse, error)
	mustEmbedUnimplementedGrpcManagerServer()
}

// UnimplementedGrpcManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGrpcManagerServer struct{}

func (UnimplementedGrpcManagerServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedGrpcManagerServer) GetTransactions(context.Context, *GetTransactionsRequest) (*TransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (UnimplementedGrpcManagerServer) GetDataServiceForRequest(context.Context, *GetDataServiceForRequestRequest) (*GetDataServiceForRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataServiceForRequest not implemented")
}
func (UnimplementedGrpcManagerServer) mustEmbedUnimplementedGrpcManagerServer() {}
func (UnimplementedGrpcManagerServer) testEmbeddedByValue()                     {}

// UnsafeGrpcManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcManagerServer will
// result in compilation errors.
type UnsafeGrpcManagerServer interface {
	mustEmbedUnimplementedGrpcManagerServer()
}

func RegisterGrpcManagerServer(s grpc.ServiceRegistrar, srv GrpcManagerServer) {
	// If the following call pancis, it indicates UnimplementedGrpcManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GrpcManager_ServiceDesc, srv)
}

func _GrpcManager_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcManagerServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcManager_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcManagerServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcManager_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcManagerServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcManager_GetTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcManagerServer).GetTransactions(ctx, req.(*GetTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcManager_GetDataServiceForRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataServiceForRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcManagerServer).GetDataServiceForRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcManager_GetDataServiceForRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcManagerServer).GetDataServiceForRequest(ctx, req.(*GetDataServiceForRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcManager_ServiceDesc is the grpc.ServiceDesc for GrpcManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aptos.indexer.v1.GrpcManager",
	HandlerType: (*GrpcManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _GrpcManager_Heartbeat_Handler,
		},
		{
			MethodName: "GetTransactions",
			Handler:    _GrpcManager_GetTransactions_Handler,
		},
		{
			MethodName: "GetDataServiceForRequest",
			Handler:    _GrpcManager_GetDataServiceForRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aptos/indexer/v1/grpc.proto",
}

const (
	DataService_Ping_FullMethodName            = "/aptos.indexer.v1.DataService/Ping"
	DataService_GetTransactions_FullMethodName = "/aptos.indexer.v1.DataService/GetTransactions"
)

// DataServiceClient is the client API for DataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataServiceClient interface {
	Ping(ctx context.Context, in *PingDataServiceRequest, opts ...grpc.CallOption) (*PingDataServiceResponse, error)
	GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransactionsResponse], error)
}

type dataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServiceClient(cc grpc.ClientConnInterface) DataServiceClient {
	return &dataServiceClient{cc}
}

func (c *dataServiceClient) Ping(ctx context.Context, in *PingDataServiceRequest, opts ...grpc.CallOption) (*PingDataServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingDataServiceResponse)
	err := c.cc.Invoke(ctx, DataService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransactionsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataService_ServiceDesc.Streams[0], DataService_GetTransactions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetTransactionsRequest, TransactionsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataService_GetTransactionsClient = grpc.ServerStreamingClient[TransactionsResponse]

// DataServiceServer is the server API for DataService service.
// All implementations must embed UnimplementedDataServiceServer
// for forward compatibility.
type DataServiceServer interface {
	Ping(context.Context, *PingDataServiceRequest) (*PingDataServiceResponse, error)
	GetTransactions(*GetTransactionsRequest, grpc.ServerStreamingServer[TransactionsResponse]) error
	mustEmbedUnimplementedDataServiceServer()
}

// UnimplementedDataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataServiceServer struct{}

func (UnimplementedDataServiceServer) Ping(context.Context, *PingDataServiceRequest) (*PingDataServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedDataServiceServer) GetTransactions(*GetTransactionsRequest, grpc.ServerStreamingServer[TransactionsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (UnimplementedDataServiceServer) mustEmbedUnimplementedDataServiceServer() {}
func (UnimplementedDataServiceServer) testEmbeddedByValue()                     {}

// UnsafeDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServiceServer will
// result in compilation errors.
type UnsafeDataServiceServer interface {
	mustEmbedUnimplementedDataServiceServer()
}

func RegisterDataServiceServer(s grpc.ServiceRegistrar, srv DataServiceServer) {
	// If the following call pancis, it indicates UnimplementedDataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataService_ServiceDesc, srv)
}

func _DataService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingDataServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).Ping(ctx, req.(*PingDataServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTransactionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataServiceServer).GetTransactions(m, &grpc.GenericServerStream[GetTransactionsRequest, TransactionsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataService_GetTransactionsServer = grpc.ServerStreamingServer[TransactionsResponse]

// DataService_ServiceDesc is the grpc.ServiceDesc for DataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aptos.indexer.v1.DataService",
	HandlerType: (*DataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _DataService_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTransactions",
			Handler:       _DataService_GetTransactions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "aptos/indexer/v1/grpc.proto",
}
